# -*- coding: utf-8 -*-
"""parser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oB820J9U1rdY4Rh59HCSFWNCyg8XQ3Xz
"""

# TUGAS BESAR TEORI BAHASA DAN AUTOMATA
# IF-43-05
# KELOMPOK 1
#   Arpriansah Yonathan (1301194112)
#   Igga Febrian Virgiani (1301194283)
#   Manuel Benedict (1301194182)

# INPUT EXAMPLE
sentence = 'banana book'
tokens = sentence.lower().split()
tokens.append('EOS')

# SYMBOLS DEFINITION
non_terminals = ['X', 'S', 'V', 'O']
terminals = ['maya', 'miko', 'moni', 'pays', 'peels',
             'picks', 'banana', 'berry', 'book', 'blouse']

# PARSE TABLE DEFINITION
parse_table = {}

parse_table[('X', 'maya')] = ['S', 'V', 'O']
parse_table[('X', 'miko')] = ['S', 'V', 'O']
parse_table[('X', 'moni')] = ['S', 'V', 'O']
parse_table[('X', 'pays')] = ['error']
parse_table[('X', 'peels')] = ['error']
parse_table[('X', 'picks')] = ['error']
parse_table[('X', 'banana')] = ['error']
parse_table[('X', 'berry')] = ['error']
parse_table[('X', 'book')] = ['error']
parse_table[('X', 'blouse')] = ['error']
parse_table[('X', 'EOS')] = ['error']

parse_table[('S', 'maya')] = ['maya']
parse_table[('S', 'miko')] = ['miko']
parse_table[('S', 'moni')] = ['moni']
parse_table[('S', 'pays')] = ['error']
parse_table[('S', 'peels')] = ['error']
parse_table[('S', 'picks')] = ['error']
parse_table[('S', 'banana')] = ['error']
parse_table[('S', 'berry')] = ['error']
parse_table[('S', 'book')] = ['error']
parse_table[('S', 'blouse')] = ['error']
parse_table[('S', 'EOS')] = ['error']

parse_table[('V', 'maya')] = ['error']
parse_table[('V', 'miko')] = ['error']
parse_table[('V', 'moni')] = ['error']
parse_table[('V', 'pays')] = ['pays']
parse_table[('V', 'peels')] = ['peels']
parse_table[('V', 'picks')] = ['picks']
parse_table[('V', 'banana')] = ['error']
parse_table[('V', 'berry')] = ['error']
parse_table[('V', 'book')] = ['error']
parse_table[('V', 'blouse')] = ['error']
parse_table[('V', 'EOS')] = ['error']

parse_table[('O', 'maya')] = ['error']
parse_table[('O', 'miko')] = ['error']
parse_table[('O', 'moni')] = ['error']
parse_table[('O', 'pays')] = ['error']
parse_table[('O', 'peels')] = ['error']
parse_table[('O', 'picks')] = ['error']
parse_table[('O', 'banana')] = ['banana']
parse_table[('O', 'berry')] = ['berry']
parse_table[('O', 'book')] = ['book']
parse_table[('O', 'blouse')] = ['blouse']
parse_table[('O', 'EOS')] = ['error']

# STACK INITIALIZATION
stack = []
stack.append('#')
stack.append('X')

# INPUT READING INITIALIZATION
idx_token = 0
symbol = tokens[idx_token]

# PARSING PROCESS
while (len(stack) > 0):
    top = stack[len(stack)-1]
    print('Top = ', top)
    print('Symbol = ', symbol)
    if top in terminals:
        print('Top adalah simbol terminal')
        if top == symbol:
            stack.pop()
            idx_token = idx_token + 1
            symbol = tokens[idx_token]
            if symbol == 'EOS':
                print('Isi stack:', stack)
                stack.pop()
        else:
            print('error')
            break
    elif top in non_terminals:
        print('Top adalah simbol non-terminal')
        if parse_table[(top, symbol)][0] != 'error':
            stack.pop()
            symbolToBePushed = parse_table[(top, symbol)]
            for i in range(len(symbolToBePushed)-1, -1, -1):
                stack.append(symbolToBePushed[i])
        else:
            print('error')
            break
    else:
        print('error')
        break

    print('Isi stack:', stack)
    print()

# CONCLUSION
print()
if symbol == 'EOS' and len(stack) == 0:
    print('Input string ', sentence, ' diterima, sesuai Grammar')
else:
    print('Error, input string:', sentence,
          ', tidak diterima, tidak sesuai Grammar')
